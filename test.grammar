! Simple Ecl Grammar !

! symbols '{' '}' and '|' are forbidden as raw tokens and must be renamed
! for some reason, the lexer will match the last token declared if there are multiple possibilities

!token EOF $

!token lb => \{
!token rb => \}
!token (
!token )
!token [
!token ]
!token ,
!token ;
!token :
!token +
!token -
!token *
!token /
!token %
!token &
!token &&
!token |
!token ||
!token ^
!token .
!token @
!token <
!token <=
!token >
!token >=
!token =
!token ==
!token !
!token !=

!token id => [a-zA-Z_][a-zA-Z_0-9]*

!token kw_ecli => ecli\b
!token kw_anmi => anmi\b
!token kw_sub => sub\b
!token kw_if => if\b
!token kw_else => else\b
!token kw_goto => goto\b
!token kw_loop => loop\b
!token kw_break => break\b
!token kw_continue => continue\b
!token kw_return => return\b
!token kw_delete => delete\b
!token kw_do => do\b
!token kw_while => while\b
!token kw_cos => cos\b
!token kw_sin => sin\b
!token kw_sqrt => sqrt\b
!token kw_int => int\b
!token kw_float => float\b
!token kw_async => async\b

!token str => "([^\\"]|\\.)*?"

! It is possible to have multiple regex map to the same token type

!token int => [1-9][0-9]*
!token int => 0[0-7]*
!token int => 0x[0-9a-fA-F]+
!token int => 0b[01]+
!token int => '(\\.|[^\\'])'

!token float => [0-9]*\.[0-9]+(([eE][-+]?\d+)|f)?
!token float => [0-9]+\.[0-9]*(([eE][-+]?\d+)|f)?
!token float => [0-9]+([eE][-+]?\d+|f)

!ignore \s+
!ignore //.*?(\n|$)
!ignore /\*(.|\n)*?\*/

! epsilon is a predifined token for nothing.

Comma_sep_str_opt ::= str Comma_sep_str2 { List::prepend($1, $0) }
                    | epsilon            { List::empty() }

Comma_sep_str2 ::= , str Comma_sep_str2  { List::prepend($2, $1) }
                 | epsilon               { List::empty() }

Param_list ::= Expr Param_list2          { List::prepend($1, $0) }
             | epsilon                   { List::empty() }

Param_list2 ::= , Expr Param_list2       { List::prepend($2, $1) }
              | epsilon                  { List::empty() }

DefParam_list ::= DefParam DefParam_list2 { List::prepend($1, $0) }
                | epsilon                { List::empty() }

DefParam_list2 ::= , DefParam DefParam_list2 { List::prepend($2, $1) }
                 | epsilon               { List::empty() }

DefParam ::= kw_int id                   { Param::Int($1) }
           | kw_float id                 { Param::Float($1) }

Ecl ::= Ecli Anmi SubList EOF            { Ecl($0, $1, $2) }

Ecli ::= kw_ecli lb Comma_sep_str_opt rb { $2 }

Anmi ::= kw_anmi lb Comma_sep_str_opt rb { $2 }

SubList ::= Sub SubList                  { List::prepend($1, $0) }
          | epsilon                      { List::empty() }

Sub ::= kw_sub id ( DefParam_list ) BlocInstr { Sub($1, $3, $5) }

BlocInstr ::= lb InstrList rb            { $1 }

InstrList ::= Instr InstrList            { List::prepend($1, $0) }
            | epsilon                    { List::empty() }

Instr ::= id Instr_sub                   { Instr::InstrSub($0, $1) }
        | BlocInstr                      { Instr::Bloc($0) }
        | int :                          { Instr::TimeLabel::Set($0) }
        | + int :                        { Instr::TimeLabel::Add($1) }
        | - int :                        { Instr::TimeLabel::Sub($1) }
        | ! RankLabel                    { $1 }
        | kw_goto id @ int ;             { Instr::Goto($1, $3) }
        | kw_if ( Expr ) BlocInstr OptElse { Instr::If($2, $4, $5) }
        | kw_loop BlocInstr              { Instr::Loop($1) }
        | kw_break ;                     { Instr::Break() }
        | kw_continue ;                  { Instr::Continue() }
        | kw_return ;                    { Instr::Return() }
        | kw_delete ;                    { Instr::Delete() }
        | kw_while ( Expr ) BlocInstr    { Instr::While($2, $4) }
        | kw_do BlocInstr kw_while ( Expr ) ; { Instr::DoWhile($4, $1) }
        | ;                              { Instr::None() }
        | kw_int id OptAffect ;          { Instr::NewVarInt($1, $2) }
        | kw_float id OptAffect ;        { Instr::NewVarFloat($1, $2) }
        | @ id ( Param_list ) AsyncOpt ; { Instr::SubCall($1, $3, $5) }

AsyncOpt ::= kw_async AsyncNumOpt        { InstrSub::Async($1) }
           | epsilon                     { InstrSub::None() }

AsyncNumOpt ::= ( int )                  { InstrSub::Async($1) }
              | epsilon                  { InstrSub::None() }

OptAffect ::= = Expr                     { InstrSub::Affect($1) }
            | epsilon                    { InstrSub::None() }

OptElse ::= kw_else ElseIf               { Instr::Else::Some($1) }
          | epsilon                      { Instr::Else::None() }

ElseIf ::= BlocInstr                     { Instr::Bloc($0) }
         | kw_if ( Expr ) BlocInstr OptElse { Instr::If($2, $4, $5) }

Instr_sub ::= ( Param_list ) ;           { InstrSub::Call($1) }
            | :                          { InstrSub::Label() }
            | = Expr ;                   { InstrSub::Affect($1) }

RankLabel ::= id :                       { Instr::RankLabel::Spec($0) }
            | * :                        { Instr::RankLabel::All()    }

Expr ::= ExprOR                          { $0 }

! maybe add compile time operators

ExprOR  ::= ExprAN ExprORp               { $1.derive($0) }
ExprORp ::= || ExprAN ExprORp            { $2.derive(Expr::Or($param0, $1)) }
ExprORp ::= epsilon                      { $param0 }

ExprAN  ::= ExprBO ExprANp               { $1.derive($0) }
ExprANp ::= && ExprBO ExprANp            { $2.derive(Expr::And($param0, $1)) }
ExprANp ::= epsilon                      { $param0 }

ExprBO  ::= ExprXO ExprBOp               { $1.derive($0) }
ExprBOp ::= | ExprXO ExprBOp             { $2.derive(Expr::BinOr($param0, $1)) }
ExprBOp ::= epsilon                      { $param0 }

ExprXO  ::= ExprBA ExprXOp               { $1.derive($0) }
ExprXOp ::= ^ ExprBA ExprXOp             { $2.derive(Expr::Xor($param0, $1)) }
ExprXOp ::= epsilon                      { $param0 }

ExprBA  ::= ExprEQ ExprBAp               { $1.derive($0) }
ExprBAp ::= & ExprEQ ExprBAp             { $2.derive(Expr::BinAnd($param0, $1)) }
ExprBAp ::= epsilon                      { $param0 }

ExprEQ  ::= ExprCM ExprEQp               { $1.derive($0) }
ExprEQp ::= == ExprCM ExprEQp            { $2.derive(Expr::Eq($param0, $1)) }
ExprEQp ::= != ExprCM ExprEQp            { $2.derive(Expr::Ne($param0, $1)) }
ExprEQp ::= epsilon                      { $param0 }

ExprCM  ::= ExprPM ExprCMp               { $1.derive($0) }
ExprCMp ::= < ExprPM ExprCMp             { $2.derive(Expr::Lt($param0, $1)) }
ExprCMp ::= <= ExprPM ExprCMp            { $2.derive(Expr::Le($param0, $1)) }
ExprCMp ::= > ExprPM ExprCMp             { $2.derive(Expr::Gt($param0, $1)) }
ExprCMp ::= >= ExprPM ExprCMp            { $2.derive(Expr::Ge($param0, $1)) }
ExprCMp ::= epsilon                      { $param0 }

ExprPM  ::= ExprTD ExprPMp               { $1.derive($0) }
ExprPMp ::= + ExprTD ExprPMp             { $2.derive(Expr::Add($param0, $1)) }
ExprPMp ::= - ExprTD ExprPMp             { $2.derive(Expr::Sub($param0, $1)) }
ExprPMp ::= epsilon                      { $param0 }

ExprTD  ::= ExprUN ExprTDp               { $1.derive($0) }
ExprTDp ::= * ExprUN ExprTDp             { $2.derive(Expr::Mul($param0, $1)) }
ExprTDp ::= / ExprUN ExprTDp             { $2.derive(Expr::Div($param0, $1)) }
ExprTDp ::= % ExprUN ExprTDp             { $2.derive(Expr::Mod($param0, $1)) }
ExprTDp ::= epsilon                      { $param0 }

ExprUN ::= - ExprPrimitive               { Expr::Uminus($1) }
         | ! ExprPrimitive               { Expr::Not($1) }
         | + ExprPrimitive               { $1 }
         | ExprPrimitive                 { $0 }

ExprPrimitive ::= int                    { Expr::Int($0) }
                | float                  { Expr::Float($0) }
                | str                    { Expr::Str($0) }
                | id                     { Expr::Id($0) }
                | [ VarExpr ]            { Expr::Var($1) }
                | ( Expr )               { $1 }
                | kw_sin ( Expr )        { Expr::Sin($2) }
                | kw_cos ( Expr )        { Expr::Cos($2) }
                | kw_sqrt ( Expr )       { Expr::Sqrt($2) }


! || (S)
! && (S)


VarExpr ::= int                          { VarExpr::Int($0) }
          | float                        { VarExpr::Float($0) }
          | - MinusVarExpr               { $1 }

MinusVarExpr ::= int                     { VarExpr::MInt($0) }
               | float                   { VarExpr::MFloat($0) }
